/*
 * cheTempoFa.ino
 * - dateTimeFunct.ino
 * - displayFunct.ino
 * - weatherFunct.ino
 * 
 * weather gadget.
 * HW:
 * - ESP-01
 * - SSD1306 0.96" dispaly 128x32  --> to be upgraded
 * - 3.3K pullup resistors
 * - 330R pass resistor
 * - pushbuttons
 *   - reset (hidden)
 *   - function (TBD)
 * - program switch (hidded)
 * - USB adapter for program/debuggin
 * 
 * SW:
 * Get date and time from NTP server
 * Get timezone and DST from (TBD)
 *   - http://worldclockapi.com/api/json/cet/now
 * Get weather from openweathermap.org
 * - current
 * - 3h forecast (TBD)
 * - next day(s) forecast (TBD)
 * - OTA (TBD)
 * - SPIFF (TBD) to manage config parameters (TBD)
 *   - ssid
 *   - password
 *   - apikey
 *   - location
 *   
 */
#include <ESP8266WiFi.h>

#include <ArduinoJson.h>

#include <Wire.h>;

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


const char* ssid      = "Vodafone-50556336";
const char* password  = "ub5se8djzl2xvea";

const char* host      = "api.openweathermap.org";
String apiKey         = "2f31dba5954c10dc63d1047e2c28acf3";

String lang = "&lang=it";  
String location= "bernareggio,IT";

String weatherString;

// oled setup
#define OLED_address  0x78
#define OLED_RESET -1

Adafruit_SSD1306 display(OLED_RESET);

#include <time.h>                       

const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 0;

char buffer[80];

time_t rawtime;
struct tm * timeinfo;

int ora, sec;
int ora_pre = -1;
int sec_pre = -1;



void setup()
{
// set Serial connection for debug
  Serial.begin(115200);
  Serial.println();

//I2C initialization for oled display
  Wire.pins(0, 2);
  Wire.begin(0,2);// 0=sda, 2=scl

//display
  display.begin(0x78);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.display();

  Serial.printf("Connect %s ", ssid);

  display.setCursor(0,0);
  display.printf("%s\n",ssid);
  display.display();
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
    display.print(".");
    display.display();
  }
  Serial.println(" connected");
  display.println("\nconnected");
  display.display();

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  Serial.println("\nWaiting for time");
  unsigned timeout = 5000;
  unsigned start = millis();
  while (!time(nullptr)) 
  {
    Serial.print(".");
    delay(1000);
  }
  delay(1000);
  
  Serial.println("Time...");
  printTime();
}


void loop()
{
  sec = timeinfo->tm_sec;
  ora = timeinfo->tm_hour;
  
  time (&rawtime);
  timeinfo = localtime (&rawtime);

  if (sec!=sec_pre){
    printTime();
    sec_pre = sec;
  }
  if (ora!=ora_pre){
    if (ora == 4) {
        bool dst = checkDST();
        if (dst) {daylightOffset_sec = 3600} else {daylightOffset_sec = 0};
        configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
      };
    getWeatherAndPrint();
    ora_pre = ora;
  }
}




bool checkDST()
{
  WiFiClient clientTime;
  bool isDayLightSavingsTime:
  
  String timeHost = "worldclockapi.com"
  Serial.printf("\n[Connecting to %s ... ", timeHost);
  if (clientTime.connect(timeHost, 80))
  {
    Serial.println("connected]");

    Serial.println("[Sending a request]");
    clientTime.print(String("GET /api/json/cet/now") +
                "\r\n"+
                 "Host: " + timeHost + "\r\n" +
                 "Connection: close\r\n" +
                 "\r\n"
    );
    Serial.println("[Response:]");
    while (clientTime.connected() || clientTime.available())
    {
      if (clientTime.available())
      {
        String line = clientTime.readStringUntil('\n');
        Serial.println(line);
// Json
        
        DynamicJsonBuffer jsonBuf;
        JsonObject& root = jsonBuf.parseObject(line);

        if (!root.success())
        {
          Serial.println("parseObject() failed");
          return;
        }

        isDayLightSavingsTime = root["isDayLightSavingsTime"]; // false
        }
      }
    }
  }
  return isDayLightSavingsTime;
}

